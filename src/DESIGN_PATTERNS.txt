                            Design Patterns
1. Chain of Responsibility -
    Explanation:
                    Aytaylik bir dasturda "bug" chiqib qoldi. Foydalanuvchida shu "bug" tufayli
                    muammo chiqdi. Foydalanuvchi dasturni yaratgan kompaniyaning telefon raqamiga qo'ng'iroq qiladi.
                    Telefonni operator operator olib, muammosini eshitadi, agar hal qilib bera olsa, hal qiladi. Aks
                    holda "project manager" ga bu muammoni aytadi. "Project Manager" ham  hal qila olsa, hal qiladi.
                    Aks holda shu "project" da ishlayotgan "Team Lead" ga aytadi. "Team Lead" ham shu holat. Agar
                    hal qilib bera olmasa, A dasturchiga aytadi. A dasturchi ham qila olsa, hal qiladi. Agar kodga
                    tushunmasa, B dasturchiga aytadi. B dasturchida ham shu. Shu sikl  muammo hal bo'lguncha yoki
                    muammoni hal qilishi mumkun bo'lgan kadrlar tugaguncha davom etadi. Natija mijozga to'g'ridan to'g'ri ko'rinadi.

    Shu vaziyat dasturlashda "Chain Of Responsibility Design Pattern" deyiladi.

    Problems:
                Agar bu "pattern" bo'lmaganida, mijoz muammosini hal qilish uchun operator, "project manager", "team lead",
                A dasturchi, B dasturchiga o'zi birma - bir telefon qilishi kerak edi. Buning uchun mijozda har birining "contact" i
                bo'lishi kerak bo'lardi.

     Used:
                1. "Handling authentication" da.
                2. "Servlet filters for handling HTTP requests." da.


2. Command -
    Explanation:

    Problems:
                "Microsoft Word" dasturida siz ishlayotgan hujjat bilan "save", "print", "delete" amallarini bajaradigan "button" lar bor.
                Dastur tomondan qarasak, shu "button" lar bosilganda, "Button" obyektining "click" metodi ishlashi kerak va vaziyatga qarab,
                "Document" obyektidagi "save",  "print", "delete" methodlari ham ishlashi kerak.  Shunga o'xshash muammolarni hal qilish
                uchun "Command Design Pattern" ishlab chiqilgan.

    Used:
            1. "Undo/Redo operations" da.
            2. "Queueing and Logging" da.

2. Interpreter -
    Explanation:
                    O'z nomi bilan tarjimon "pattern" i, berilgan "context" ni bir nechta qoidalar asosida o'zimizga kerakli ko'rinishga keltirish
                    uchun ishlatiladi. Va bu "handle" qilish bir joyda katta, tushunarsiz... ko'rinishda emas, "class" larda ichma - ich ko'rinishda
                    bo'ladi.
    Problems:
                Misol uchun, dasturlash tillaridagi o'zgaruvchilarni yozish qoidasi bo'yicha "String context" ni tekshiirishimiz kerak.
                Bunda "context" ga ishlov berib, uni "available" qilib qaytarishimiz kerak. Buni bitta methodda agar birinchi harf "_" bo'lsa,
                olib tashla... desak bo'ladi. Lekin bu har doim ham "clean code" bo'lmaydi (shartni kam - ko'pligiga qarab). Bu muammoni
                "Interpreter Patter" ni hal qiladi.

    Used:
            1. "Custom regular expression." larda
            2. "Compilers" da.
            3. "Language translator" da.
            4. "SQL parsers" da
            5. "Calculators" da
